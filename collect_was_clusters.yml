---
- name: Collect WebSphere cluster/app info from all Dmgr nodes
  hosts: all_servers
  gather_facts: no
  vars:
    wsadmin_script_path: /tmp/cluster_app_report.py

  tasks:
    - name: Copy Jython script to each server
      copy:
        content: |
          # cluster_app_report.py
          import socket
          hostname = socket.gethostname()

          clusters = AdminConfig.list("ServerCluster").splitlines()

          for cluster in clusters:
              cname = AdminConfig.showAttribute(cluster, "name")
              members = AdminConfig.list("ClusterMember", cluster).splitlines()
              jvm_count = len(members)

              # Distinct nodes
              nodes = set()
              for member in members:
                  node = AdminConfig.showAttribute(member, "nodeName")
                  nodes.add(node)
              node_count = len(nodes)

              # Count apps targeted to this cluster
              apps = AdminApp.list().splitlines()
              deployed_apps = []
              for app in apps:
                  targets = AdminApp.view(app, "-MapModulesToServers").splitlines()
                  for t in targets:
                      if cname in t:
                          deployed_apps.append(app)
                          break
              app_count = len(deployed_apps)

              # Output format: hostname, cluster_name, node_count, jvm_count, app_count
              print "%s, %s, %d, %d, %d" % (hostname, cname, node_count, jvm_count, app_count)
        dest: "{{ wsadmin_script_path }}"
        mode: '0644'

    - name: Find wsadmin.sh path dynamically
      shell: "ls -1 /usr/WebSphere*/AppServer/profiles/Dmgr01/bin/wsadmin.sh 2>/dev/null | head -n 1"
      register: dmgr_path
      changed_when: false
      failed_when: false

    - name: Skip host if no Dmgr found
      debug:
        msg: "No Dmgr wsadmin.sh found on {{ inventory_hostname }}, skipping."
      when: dmgr_path.stdout == ""

    - name: Get owner of wsadmin.sh
      stat:
        path: "{{ dmgr_path.stdout }}"
      register: wsadmin_stat
      when: dmgr_path.stdout != ""

    - name: Save wsadmin owner
      set_fact:
        wsadmin_owner: "{{ wsadmin_stat.stat.pw_name }}"
      when: dmgr_path.stdout != ""

    - name: Run wsadmin as file owner
      shell: >
        {{ dmgr_path.stdout }}
        -lang jython -f {{ wsadmin_script_path }}
      register: cluster_report
      become: true
      become_user: "{{ wsadmin_owner }}"
      when: dmgr_path.stdout != ""

    - name: Collect cluster report facts
      set_fact:
        all_reports: "{{ (all_reports | default([])) + cluster_report.stdout_lines }}"
      when: dmgr_path.stdout != ""

- name: Write consolidated CSV on Ansible control node
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Ensure reports directory exists
      file:
        path: ./reports
        state: directory

    - name: Write single combined CSV file
      copy:
        dest: ./reports/websphere_cluster_report.csv
        content: |
          hostname,cluster_name,node_count,jvm_count,app_count
          {% for host, vars in hostvars.items() %}
          {% if vars.all_reports is defined %}
          {% for row in vars.all_reports %}
          {{ row }}
          {% endfor %}
          {% endif %}
          {% endfor %}
